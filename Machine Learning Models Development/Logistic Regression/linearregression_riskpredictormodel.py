# -*- coding: utf-8 -*-
"""LinearRegression_RiskPredictorModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KCLZPhk3SA2P7luokHyoIN1zEp-AiK6n
"""



"""Import """

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

#loading the csv data to a Pandas DataFrame
effects_data=pd.read_csv('/content/dataSet.csv',encoding='cp1252')

effects_data

#print first five rows of the dataset
effects_data.head()

#print last 5 data of the dataset
effects_data.tail()

#number of rows and columns of the dataset
effects_data.shape

#getting some information about the dataset
effects_data.info()

#checking missing values
effects_data.isnull().sum()

#statistical measures about the data
effects_data.describe()

"""Replace variable values into Numerical form & display the value counts

Male - 1
Female -0
"""

effects_data.Sex=effects_data.Sex.map({'Male':1,'Female':0})
effects_data['Sex'].value_counts()

"""Living area
DownTown -1
Outskirt -0

"""

effects_data.Living_Area=effects_data.Living_Area.map({'Downtown':1,'Outskirt':0})
effects_data['Living_Area'].value_counts()

"""**Vaccine Type**
<br>
Pfizer':0  'Moderna':1  'Sinopharm':2  'Astrazeneca':3

"""

effects_data.vaccine_type=effects_data.vaccine_type.map({'Pfizer':0,'Moderna':1,'Sinopharm':2,'Astrazeneca':3})
effects_data['vaccine_type'].value_counts()

"""**Blood Group** <br>

A+  :0 <br>
A-  :1<br>
AB+ :2 <br>
AB- :3<br>
B+  :4<br>
B-  :5<br>
O+  :6<br>
O-  :7<br>

"""

effects_data.blood_group=effects_data.blood_group .map({'A+':0,'A-':1,'AB+':2,'AB-':3,'B+':4,'B-':5,'O+':6,'O-':7})
effects_data['blood_group'].value_counts()

"""**Side Effects**<BR>
Yes -1<BR>
No -0

"""

sideEffects=['Swelling','Redness','Itching','Fever','Headache','Muscle_Pain','Tiredness','Coughing','Diarrhea','Nausea_and_vomiting','Breathlessness','Joint_ Pain','Fainted','Anaphylactic_Reaction','Tingling','Swollen_ Lymph_Nodes']


#Swelling
effects_data.Swelling=effects_data.Swelling.map({'Yes':1,'No':0})
effects_data['Swelling'].value_counts()

#Redness
effects_data.Redness=effects_data.Redness.map({'Yes':1,'No':0})
effects_data['Redness'].value_counts()

#Itching
effects_data.Itching=effects_data.Itching.map({'Yes':1,'No':0})
effects_data['Itching'].value_counts()

#Fever
effects_data.Fever=effects_data.Fever.map({'Yes':1,'No':0})
effects_data['Fever'].value_counts()

#Headache
effects_data.Headache=effects_data.Headache.map({'Yes':1,'No':0})
effects_data['Headache'].value_counts()

#Muscle_Pain
effects_data.Muscle_Pain=effects_data.Muscle_Pain.map({'Yes':1,'No':0})
effects_data['Muscle_Pain'].value_counts()

#Tiredness
effects_data.Tiredness=effects_data.Tiredness.map({'Yes':1,'No':0})
effects_data['Tiredness'].value_counts()

#Coughing
effects_data.Coughing=effects_data.Coughing.map({'Yes':1,'No':0})
effects_data['Coughing'].value_counts()

#Diarrhea
effects_data.Diarrhea=effects_data.Diarrhea.map({'Yes':1,'No':0})
effects_data['Diarrhea'].value_counts()

#Nausea_ and_vomiting
effects_data.Nausea_and_vomiting=effects_data.Nausea_and_vomiting.map({'Yes':1,'No':0})
effects_data['Nausea_and_vomiting'].value_counts()

#Breathlessness
effects_data.Breathlessness=effects_data.Breathlessness.map({'Yes':1,'No':0})
effects_data['Breathlessness'].value_counts()

#Joint_Pain
effects_data.Joint_Pain=effects_data.Joint_Pain.map({'Yes':1,'No':0})
effects_data['Joint_Pain'].value_counts()

#Fainted
effects_data.Fainted=effects_data.Fainted.map({'Yes':1,'No':0})
effects_data['Fainted'].value_counts()

#Anaphylactic_Reaction
effects_data.Anaphylactic_Reaction=effects_data.Anaphylactic_Reaction.map({'Yes':1,'No':0})
effects_data['Anaphylactic_Reaction'].value_counts()

#Tingling
effects_data.Tingling=effects_data.Tingling.map({'Yes':1,'No':0})
effects_data['Tingling'].value_counts()


#Swollen_ Lymph_Nodes
effects_data.Swollen_Lymph_Nodes=effects_data.Swollen_Lymph_Nodes.map({'Yes':1,'No':0})
effects_data['Swollen_Lymph_Nodes'].value_counts()

"""Splitting features and targets

Features
"""

X=effects_data.iloc[:,0:7]

X

"""Targets"""

Y1=effects_data.iloc[:,7]

Y1

"""split the data into training and test data"""

X_train,X_test,Y1_train,Y1_test=train_test_split(X,Y1,test_size=0.2,random_state=0)

print(X.shape,X_train.shape,X_test.shape)

"""Model training"""

model=LogisticRegression()

#Train the logistic regression model with trained data
model.fit(X_train,Y1_train)

"""Accuracy Score"""

#Accuracy of the trainning dataset
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y1_train)

print('Accuracy on trainning data: ',training_data_accuracy)

#Accuracy on Test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y1_test)

print('Accuracy on test data: ',test_data_accuracy)